name: Comprehensive Game Testing

on:
  push:
    branches: [ main, develop, data_refactor ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e
        - ship-systems
        - ai-behavior
        - mission-system

jobs:
  unit-tests:
    name: Unit Tests (Pure Logic)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'unit' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        python -m pytest tests/playwright/test_*_logic.py -v --tb=short --junitxml=test-results-unit.xml
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: test-results-unit.xml

  integration-tests:
    name: Integration Tests (Component Testing)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'integration' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Playwright browsers
      run: |
        python -m playwright install chromium
        python -m playwright install-deps
    
    - name: Run integration tests
      run: |
        python -m pytest tests/playwright/test_*_systems.py tests/playwright/test_*_integration.py -v --tb=short --junitxml=test-results-integration.xml
      env:
        PLAYWRIGHT_HEADLESS: "1"
        PLAYWRIGHT_SLOW_MO: "0"
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results-integration.xml
    
    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: integration-test-screenshots
        path: test-results/

  e2e-tests:
    name: End-to-End Tests (Full Game)
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'e2e' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Playwright browsers
      run: |
        python -m playwright install chromium
        python -m playwright install-deps
    
    - name: Run E2E tests
      run: |
        python -m pytest tests/playwright/test_*_e2e.py tests/playwright/test_star_charts_tooltips.py tests/playwright/test_star_charts_hitboxes.py -v --tb=short --junitxml=test-results-e2e.xml
      env:
        PLAYWRIGHT_HEADLESS: "1"
        PLAYWRIGHT_SLOW_MO: "100"
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-results-e2e.xml
    
    - name: Upload screenshots and videos on failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-test-artifacts
        path: |
          test-results/
          screenshots/
          videos/

  system-specific-tests:
    name: System-Specific Tests
    runs-on: ubuntu-latest
    if: ${{ contains(fromJson('["ship-systems", "ai-behavior", "mission-system"]'), github.event.inputs.test_suite) }}
    
    strategy:
      matrix:
        test-suite: 
          - ${{ github.event.inputs.test_suite }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Playwright browsers
      run: |
        python -m playwright install chromium
        python -m playwright install-deps
    
    - name: Run system-specific tests
      run: |
        case "${{ matrix.test-suite }}" in
          "ship-systems")
            python -m pytest tests/playwright/test_ship_logic.py tests/playwright/test_ship_systems.py -v --tb=short --junitxml=test-results-${{ matrix.test-suite }}.xml
            ;;
          "ai-behavior")
            python -m pytest tests/playwright/test_ai_logic.py tests/playwright/test_ai_behavior.py -v --tb=short --junitxml=test-results-${{ matrix.test-suite }}.xml
            ;;
          "mission-system")
            python -m pytest tests/playwright/test_mission_logic.py tests/playwright/test_mission_integration.py -v --tb=short --junitxml=test-results-${{ matrix.test-suite }}.xml
            ;;
        esac
      env:
        PLAYWRIGHT_HEADLESS: "1"
        PLAYWRIGHT_SLOW_MO: "100"
    
    - name: Upload system-specific test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ${{ matrix.test-suite }}-test-results
        path: test-results-${{ matrix.test-suite }}.xml

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: test-results/
    
    - name: Display test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for result_file in test-results/*/test-results-*.xml; do
          if [ -f "$result_file" ]; then
            test_type=$(basename $(dirname "$result_file"))
            echo "### $test_type" >> $GITHUB_STEP_SUMMARY
            
            # Extract test counts from JUnit XML (basic parsing)
            tests=$(grep -o 'tests="[0-9]*"' "$result_file" | cut -d'"' -f2 || echo "0")
            failures=$(grep -o 'failures="[0-9]*"' "$result_file" | cut -d'"' -f2 || echo "0")
            errors=$(grep -o 'errors="[0-9]*"' "$result_file" | cut -d'"' -f2 || echo "0")
            
            echo "- Tests: $tests" >> $GITHUB_STEP_SUMMARY
            echo "- Failures: $failures" >> $GITHUB_STEP_SUMMARY
            echo "- Errors: $errors" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
    
    - name: Check overall test status
      run: |
        # Check if any test job failed
        if [ "${{ needs.unit-tests.result }}" = "failure" ] || 
           [ "${{ needs.integration-tests.result }}" = "failure" ] || 
           [ "${{ needs.e2e-tests.result }}" = "failure" ]; then
          echo "❌ Some tests failed"
          exit 1
        else
          echo "✅ All tests passed"
        fi

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == '' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m playwright install chromium
    
    - name: Run performance tests
      run: |
        # Run a subset of tests with timing
        time python -m pytest tests/playwright/test_ship_logic.py -v --tb=short --durations=0
      
    - name: Check test execution time
      run: |
        echo "Performance check completed. Review durations above."
        echo "Target: Unit tests should complete in < 30 seconds"
        echo "Target: Integration tests should complete in < 2 minutes"
