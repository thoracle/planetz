/**
 * 3D Proximity Detector Test
 * 
 * Test the new Elite (1984) inspired 3D perspective proximity detector.
 * Run in browser console after game loads.
 */

function test3DProximityDetector() {
    console.log('üéØ Testing 3D Perspective Proximity Detector...');
    
    // Check if game is loaded
    if (!window.starfieldManager) {
        console.error('‚ùå Game not loaded. Load the game first.');
        return false;
    }
    
    // Check if 3D proximity detector exists
    if (!window.starfieldManager.proximityDetector3D) {
        console.error('‚ùå 3D Proximity Detector not found.');
        return false;
    }
    
    const detector = window.starfieldManager.proximityDetector3D;
    const ship = window.starfieldManager.viewManager?.getShip();
    
    console.log('üìã 3D Proximity Detector Test Results:');
    console.log(`  ‚úì Game loaded: ${window.starfieldManager ? 'YES' : 'NO'}`);
    console.log(`  ‚úì 3D Proximity Detector: ${detector ? 'YES' : 'NO'}`);
    console.log(`  ‚úì Ship available: ${ship ? 'YES' : 'NO'}`);
    
    if (ship) {
        const hasRadarCards = ship.hasSystemCardsSync && ship.hasSystemCardsSync('radar');
        console.log(`  ‚úì Has proximity detector cards: ${hasRadarCards ? 'YES' : 'NO'}`);
        
        const radarSystem = ship.getSystem && ship.getSystem('radar');
        console.log(`  ‚úì Proximity detector system: ${radarSystem ? 'YES' : 'NO'}`);
        
        if (radarSystem) {
            console.log(`  ‚úì System level: ${radarSystem.level}`);
            console.log(`  ‚úì System range: ${(radarSystem.getRange() / 1000).toFixed(0)}km`);
        }
    }
    
    // Test 3D configuration
    if (detector) {
        console.log('üéÆ 3D Configuration:');
        console.log(`  ‚Ä¢ Grid size: ${detector.config.gridSize}x${detector.config.gridSize}`);
        console.log(`  ‚Ä¢ Grid tilt: ${detector.config.gridTilt}¬∞`);
        console.log(`  ‚Ä¢ Detection range: ${(detector.config.detectionRange / 1000).toFixed(0)}km`);
        console.log(`  ‚Ä¢ Altitude range: ¬±${(detector.config.altitudeRange / 1000).toFixed(0)}km`);
        console.log(`  ‚Ä¢ Update frequency: ${detector.config.updateFrequency}Hz`);
        console.log(`  ‚Ä¢ Screen size: ${(detector.config.screenWidth * 100).toFixed(0)}% x ${(detector.config.screenHeight * 100).toFixed(0)}%`);
        
        // Test 3D scene components
        console.log('üéØ 3D Scene Components:');
        console.log(`  ‚Ä¢ Scene: ${detector.scene ? 'YES' : 'NO'}`);
        console.log(`  ‚Ä¢ Camera: ${detector.camera ? 'YES' : 'NO'}`);
        console.log(`  ‚Ä¢ Renderer: ${detector.renderer ? 'YES' : 'NO'}`);
        console.log(`  ‚Ä¢ Grid mesh: ${detector.gridMesh ? 'YES' : 'NO'}`);
        console.log(`  ‚Ä¢ Player indicator: ${detector.playerIndicator ? 'YES' : 'NO'}`);
        
        if (detector.camera) {
            console.log(`  ‚Ä¢ Camera FOV: ${detector.camera.fov}¬∞`);
            console.log(`  ‚Ä¢ Camera position: (${detector.camera.position.x.toFixed(1)}, ${detector.camera.position.y.toFixed(1)}, ${detector.camera.position.z.toFixed(1)})`);
        }
        
        // Test visibility toggle
        console.log('üîÑ Testing visibility toggle...');
        const wasVisible = detector.isVisible;
        const toggleResult = detector.toggle();
        
        if (toggleResult) {
            console.log(`  ‚úì Toggle successful: ${wasVisible ? 'Hidden' : 'Shown'}`);
            
            // Toggle back if we changed it
            if (detector.isVisible !== wasVisible) {
                setTimeout(() => {
                    detector.toggle();
                    console.log(`  ‚úì Restored original state: ${wasVisible ? 'Shown' : 'Hidden'}`);
                }, 1000);
            }
        } else {
            console.log(`  ‚ùå Toggle failed - likely no proximity detector cards installed`);
        }
    }
    
    console.log('üéÆ Manual test commands:');
    console.log('  ‚Ä¢ Press P key to toggle 3D proximity detector');
    console.log('  ‚Ä¢ Or run: window.starfieldManager.toggleProximityDetector()');
    console.log('  ‚Ä¢ Test with objects: Fly near planets/stations to see blips');
    
    console.log('‚úÖ 3D Proximity Detector test completed!');
    console.log('üéØ Features to verify:');
    console.log('  ‚Ä¢ Tilted 3D perspective grid (35¬∞ angle)');
    console.log('  ‚Ä¢ Grid rotates with ship orientation');
    console.log('  ‚Ä¢ Vertical altitude lines for objects');
    console.log('  ‚Ä¢ Color-coded blips (Red=Enemy, Green=Friendly, Yellow=Neutral)');
    console.log('  ‚Ä¢ Elite (1984) retro holographic aesthetic');
    console.log('  ‚Ä¢ Lower center screen position');
    
    return true;
}

// Export for manual testing
if (typeof window !== 'undefined') {
    window.test3DProximityDetector = test3DProximityDetector;
    console.log('üéØ test3DProximityDetector() function is now available in the console');
}

// Auto-run test if called directly
if (typeof window !== 'undefined') {
    // Wait for game to load
    setTimeout(() => {
        if (window.starfieldManager) {
            test3DProximityDetector();
        } else {
            console.log('‚è≥ Waiting for game to initialize...');
            // Try again in a few seconds
            setTimeout(() => {
                if (window.starfieldManager) {
                    test3DProximityDetector();
                } else {
                    console.log('‚ùå Game not loaded after 10 seconds. Load the game first.');
                }
            }, 5000);
        }
    }, 2000);
}